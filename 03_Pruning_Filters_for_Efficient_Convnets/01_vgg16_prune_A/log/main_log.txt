Using cuda device
========================================  conv1  ========================================
pruned_rate : 50%
num_prune_channels : 32
weight.shape : torch.Size([64, 3, 3, 3])
bias.shape : torch.Size([64])
bn_gamma.shape : torch.Size([64])
bn_beta.shape : torch.Size([64])
bn_running_mean.shape : torch.Size([64])
bn_running_var.shape : torch.Size([64])
sorted_weight_indices : tensor([30, 24, 32, 22, 47, 41, 49, 53, 51, 56, 23,  0, 15, 57, 50,  7, 58, 36,
         2,  4, 12, 31, 17, 16, 63, 21,  1, 33, 48,  9, 43, 13, 37, 52, 34, 27,
        10, 62, 60, 46, 59, 39, 18, 40, 55, 29,  3,  8, 19, 54, 35, 20, 28,  6,
        11, 44, 14, 61, 25, 38, 45,  5, 26, 42], device='cuda:0')
saving_filter_idices : tensor([30, 24, 32, 22, 47, 41, 49, 53, 51, 56, 23,  0, 15, 57, 50,  7, 58, 36,
         2,  4, 12, 31, 17, 16, 63, 21,  1, 33, 48,  9, 43, 13],
       device='cuda:0')
pruned_weight.shape : torch.Size([32, 3, 3, 3])
pruned_bias.shape : torch.Size([32])
pruned_bn_gamma.shape : torch.Size([32])
pruned_bn_beta.shape : torch.Size([32])
pruned_bn_running_mean.shape : torch.Size([32])
pruned_bn_running_var.shape : torch.Size([32])
pruned_next_weight.shape : torch.Size([64, 32, 3, 3])
========================================  conv2  ========================================
pruned_rate : 0%
no filter pruned
========================================  conv3  ========================================
pruned_rate : 0%
no filter pruned
========================================  conv4  ========================================
pruned_rate : 0%
no filter pruned
========================================  conv5  ========================================
pruned_rate : 0%
no filter pruned
========================================  conv6  ========================================
pruned_rate : 0%
no filter pruned
========================================  conv7  ========================================
pruned_rate : 0%
no filter pruned
========================================  conv8  ========================================
pruned_rate : 50%
num_prune_channels : 256
weight.shape : torch.Size([512, 256, 3, 3])
bias.shape : torch.Size([512])
bn_gamma.shape : torch.Size([512])
bn_beta.shape : torch.Size([512])
bn_running_mean.shape : torch.Size([512])
bn_running_var.shape : torch.Size([512])
sorted_weight_indices : tensor([493, 503, 340, 370, 265, 147, 255, 439, 335,   3, 135,  26, 360, 347,
        405, 208, 456, 398, 176,  97, 132, 476,  21, 477,  46, 246, 234, 322,
        371, 159, 278, 355, 189, 136, 239, 274, 161, 269, 124, 378,  70,  86,
        106,  76, 182,  74, 187,  22, 112, 207, 353, 441, 458,  59, 144, 430,
        175,  98, 482, 309, 470, 367, 321, 317, 242, 403, 284,  84, 169,  83,
        155, 473, 268, 215,  94, 387, 217, 363, 437, 150,  30, 248, 376,  90,
        465, 171,  23, 432, 313,  63, 461, 395,  66, 307, 419,  44,  34, 190,
        228, 392, 104,  56, 494, 204,  93,  57, 488,  81, 337, 393, 359, 251,
        197, 127,  40, 230, 213, 158, 448, 126, 261, 184, 270, 447, 111, 103,
         45, 373, 272, 481, 177,  10, 315, 134, 160, 218,  16, 350, 502,  55,
        424, 237, 366,  99, 173, 118, 348, 435,  41, 295, 291, 436, 224, 364,
        156,  29, 459, 389, 341, 256, 162, 356,  17, 142, 117, 475, 209, 497,
        275, 128, 361, 490, 280, 264, 452, 107, 186, 250,   5, 318,  20, 396,
        368, 231, 483, 152, 170, 428, 236,  28, 443, 110, 422,  60, 129, 415,
         69, 420, 297,  67, 388, 257, 384, 206, 140, 286,   9,  15, 444, 351,
        372, 450, 504, 164, 345, 401, 414, 467, 298, 108,  82,  53, 219, 386,
        174, 271, 247,  13, 180, 105, 402, 148, 354, 455, 357, 165, 472,  68,
        468, 499,  24, 332,  12,   7, 449,  25, 125, 399, 304, 500, 253, 214,
        259, 352, 330, 229, 168, 464,  42, 311, 288,  65, 349, 305, 146, 491,
        369, 109, 178, 191,  85, 339, 149, 233, 509, 469, 451, 130, 487, 485,
        262,  78, 323, 334, 429, 260, 381, 198, 123, 166, 181, 221, 446, 338,
         79, 263,  96, 276,  31, 119, 122,  54, 344,  92,  58, 417,  64, 258,
        235, 153,  50,  11, 139, 427, 249, 157, 154, 290, 501, 343, 329, 431,
        362, 225, 425, 506,  14, 408, 216,  80, 240,   1,   6,  73,  52, 336,
        314, 331, 143, 426, 434, 474,   0, 326, 303, 489,  19, 457,  72, 380,
        102, 114,   8, 374,  35, 279,  18, 101, 440, 453, 238, 328, 202, 312,
        199, 327, 281, 192, 413, 445, 138, 167, 277, 245,  27, 212, 296, 375,
        227,  32, 394,  51, 115, 163, 463,  43,  87, 306, 505, 241, 462, 416,
        131, 145,  38, 391, 404,  37, 418, 289, 442, 460, 232, 406, 407, 116,
        400, 358, 193, 196, 423, 342,  62, 267, 172,  49, 409, 510, 195, 480,
        299, 316, 308,  91, 205, 200, 438, 266,  88, 282, 293, 346, 383, 495,
        243, 287, 397, 379, 390,  33, 211, 141, 325,  89, 310, 222,   4, 220,
         77, 100,  61, 151, 294, 511, 188, 333, 254, 292,  75, 479, 113,  36,
         47, 498, 492, 484, 412, 320, 133, 252, 301, 411,  39, 300, 421, 302,
        185, 377, 194, 121, 454, 285, 433,  71, 382, 319, 496, 486, 273, 283,
        478, 203, 226, 507, 324,  48, 471, 466, 120, 365, 183,  95, 210,   2,
        410, 385, 223, 137, 508, 244, 179, 201], device='cuda:0')
saving_filter_idices : tensor([493, 503, 340, 370, 265, 147, 255, 439, 335,   3, 135,  26, 360, 347,
        405, 208, 456, 398, 176,  97, 132, 476,  21, 477,  46, 246, 234, 322,
        371, 159, 278, 355, 189, 136, 239, 274, 161, 269, 124, 378,  70,  86,
        106,  76, 182,  74, 187,  22, 112, 207, 353, 441, 458,  59, 144, 430,
        175,  98, 482, 309, 470, 367, 321, 317, 242, 403, 284,  84, 169,  83,
        155, 473, 268, 215,  94, 387, 217, 363, 437, 150,  30, 248, 376,  90,
        465, 171,  23, 432, 313,  63, 461, 395,  66, 307, 419,  44,  34, 190,
        228, 392, 104,  56, 494, 204,  93,  57, 488,  81, 337, 393, 359, 251,
        197, 127,  40, 230, 213, 158, 448, 126, 261, 184, 270, 447, 111, 103,
         45, 373, 272, 481, 177,  10, 315, 134, 160, 218,  16, 350, 502,  55,
        424, 237, 366,  99, 173, 118, 348, 435,  41, 295, 291, 436, 224, 364,
        156,  29, 459, 389, 341, 256, 162, 356,  17, 142, 117, 475, 209, 497,
        275, 128, 361, 490, 280, 264, 452, 107, 186, 250,   5, 318,  20, 396,
        368, 231, 483, 152, 170, 428, 236,  28, 443, 110, 422,  60, 129, 415,
         69, 420, 297,  67, 388, 257, 384, 206, 140, 286,   9,  15, 444, 351,
        372, 450, 504, 164, 345, 401, 414, 467, 298, 108,  82,  53, 219, 386,
        174, 271, 247,  13, 180, 105, 402, 148, 354, 455, 357, 165, 472,  68,
        468, 499,  24, 332,  12,   7, 449,  25, 125, 399, 304, 500, 253, 214,
        259, 352, 330, 229], device='cuda:0')
pruned_weight.shape : torch.Size([256, 256, 3, 3])
pruned_bias.shape : torch.Size([256])
pruned_bn_gamma.shape : torch.Size([256])
pruned_bn_beta.shape : torch.Size([256])
pruned_bn_running_mean.shape : torch.Size([256])
pruned_bn_running_var.shape : torch.Size([256])
pruned_next_weight.shape : torch.Size([512, 256, 3, 3])
========================================  conv9  ========================================
pruned_rate : 50%
num_prune_channels : 256
weight.shape : torch.Size([512, 256, 3, 3])
bias.shape : torch.Size([512])
bn_gamma.shape : torch.Size([512])
bn_beta.shape : torch.Size([512])
bn_running_mean.shape : torch.Size([512])
bn_running_var.shape : torch.Size([512])
sorted_weight_indices : tensor([370, 424, 245, 268, 312, 109, 316, 297,  95, 413, 241, 244, 117, 160,
          6,  60, 254, 201, 375, 445,  33, 119, 451, 149, 309, 275, 453, 384,
         86, 202, 183, 456, 488, 143, 162,  46, 212, 347, 463, 276,  96, 272,
        140, 181,  15, 108, 194,  78, 482, 409, 314, 442,   7, 280,  98, 214,
        240, 300, 301, 302, 231, 416, 461,  90,  85, 349,  77, 433, 216, 226,
        155, 483, 444, 131, 217,  55, 173, 407,  76,  81, 303, 282, 481, 469,
        278, 230, 311, 253, 152, 393, 465, 340, 228, 487, 394, 101, 400, 509,
         50,   1, 196, 345, 222, 178, 428, 281, 154,  74, 251, 423, 498, 426,
         56, 136, 372, 233, 255, 168,  71,   5, 352, 495, 328,   4, 187, 369,
        157, 293,  80,  37, 334,  36, 147,  99, 502, 346,  17, 171,  97, 292,
        163, 223, 294, 227, 452, 269, 103, 113,  52, 503, 412,  16, 165, 305,
         73,   2,  18, 506, 325, 247, 310, 353, 447,  64, 246, 414, 121, 236,
        172, 159, 166, 507, 205, 313, 430, 410, 368,  35,  58, 378, 307, 324,
        484, 169,  65, 174, 118,  25,  38, 192, 208,  53,  21,   3,  94, 123,
          9, 342, 125,  69, 130, 485, 350, 486, 437, 504, 478, 285, 197,  39,
          8, 170, 459, 257, 266, 365, 467, 215, 496, 351, 184, 322, 448, 235,
         19, 319, 464,  49,  54, 234, 411, 335, 359, 145, 385, 105, 388, 256,
         72, 401,  30, 344, 455, 209,  13,  40, 392, 438,  63, 114, 274, 284,
         12, 458, 115, 466, 146, 243, 102,  93, 112, 164, 439, 182, 441, 327,
        471,  47, 462,  31, 283, 219, 440, 398, 139, 265, 225, 408, 366, 402,
        298, 138, 406, 158,  42,  27, 468, 264, 417, 100, 151, 308, 421, 200,
        267, 232, 341,  67, 206, 371, 323,  28, 354, 258, 189, 156, 331, 315,
        475, 491,  79, 477, 367, 449, 175,  89, 390, 299, 129, 198,  24, 239,
        450, 126, 460, 120, 238, 180, 286,  88, 317,  45, 508, 321, 435, 229,
        195, 415, 185, 290, 318, 404, 403, 291, 427, 110, 499, 262, 104, 142,
        220, 473, 218,  75, 457, 186, 381, 337, 287,  61,  70, 363, 333, 124,
         84, 395, 270, 510, 357, 137, 141, 364, 221,  68, 355,  92, 289, 339,
        391, 474,  48, 259, 500, 188, 295, 144, 436, 107, 193, 380, 199, 122,
        383, 116, 489,  29,  10,  44, 479, 279, 494,  14, 470, 306, 263, 389,
         59,  66, 326, 261, 250, 418,  57, 127, 329, 343, 419,  41, 360, 288,
        132, 237, 167, 135, 374, 134, 376, 387, 399, 432, 422, 472, 497, 425,
        248, 273,   0, 429,  43, 277, 405, 296, 249, 320, 210, 420, 128,  26,
        161,  34, 356, 191, 511,  51, 106, 190, 252, 505, 492,  91, 454, 431,
         62, 213,  82, 150, 203, 476, 207, 338,  20, 379, 443, 242, 348, 397,
        434, 336, 396, 133, 386, 177, 358,  22, 211,  87, 332, 204, 361, 304,
        260, 373, 148, 501, 382, 480, 271, 176, 377, 179, 330, 153, 490, 446,
         32,  83, 224, 111,  23,  11, 362, 493], device='cuda:0')
saving_filter_idices : tensor([370, 424, 245, 268, 312, 109, 316, 297,  95, 413, 241, 244, 117, 160,
          6,  60, 254, 201, 375, 445,  33, 119, 451, 149, 309, 275, 453, 384,
         86, 202, 183, 456, 488, 143, 162,  46, 212, 347, 463, 276,  96, 272,
        140, 181,  15, 108, 194,  78, 482, 409, 314, 442,   7, 280,  98, 214,
        240, 300, 301, 302, 231, 416, 461,  90,  85, 349,  77, 433, 216, 226,
        155, 483, 444, 131, 217,  55, 173, 407,  76,  81, 303, 282, 481, 469,
        278, 230, 311, 253, 152, 393, 465, 340, 228, 487, 394, 101, 400, 509,
         50,   1, 196, 345, 222, 178, 428, 281, 154,  74, 251, 423, 498, 426,
         56, 136, 372, 233, 255, 168,  71,   5, 352, 495, 328,   4, 187, 369,
        157, 293,  80,  37, 334,  36, 147,  99, 502, 346,  17, 171,  97, 292,
        163, 223, 294, 227, 452, 269, 103, 113,  52, 503, 412,  16, 165, 305,
         73,   2,  18, 506, 325, 247, 310, 353, 447,  64, 246, 414, 121, 236,
        172, 159, 166, 507, 205, 313, 430, 410, 368,  35,  58, 378, 307, 324,
        484, 169,  65, 174, 118,  25,  38, 192, 208,  53,  21,   3,  94, 123,
          9, 342, 125,  69, 130, 485, 350, 486, 437, 504, 478, 285, 197,  39,
          8, 170, 459, 257, 266, 365, 467, 215, 496, 351, 184, 322, 448, 235,
         19, 319, 464,  49,  54, 234, 411, 335, 359, 145, 385, 105, 388, 256,
         72, 401,  30, 344, 455, 209,  13,  40, 392, 438,  63, 114, 274, 284,
         12, 458, 115, 466], device='cuda:0')
pruned_weight.shape : torch.Size([256, 256, 3, 3])
pruned_bias.shape : torch.Size([256])
pruned_bn_gamma.shape : torch.Size([256])
pruned_bn_beta.shape : torch.Size([256])
pruned_bn_running_mean.shape : torch.Size([256])
pruned_bn_running_var.shape : torch.Size([256])
pruned_next_weight.shape : torch.Size([512, 256, 3, 3])
========================================  conv10  ========================================
pruned_rate : 50%
num_prune_channels : 256
weight.shape : torch.Size([512, 256, 3, 3])
bias.shape : torch.Size([512])
bn_gamma.shape : torch.Size([512])
bn_beta.shape : torch.Size([512])
bn_running_mean.shape : torch.Size([512])
bn_running_var.shape : torch.Size([512])
sorted_weight_indices : tensor([333, 325, 156, 221, 500,   9, 442, 269, 334,  12, 385, 479,  74,  80,
        140, 220, 187, 170, 258, 120, 130, 382,  56, 203, 336, 265, 295, 285,
        413, 457, 118, 281,  63, 273, 353, 256, 126, 487, 205,  35,  33, 311,
        508,  53,  50, 383, 153, 294, 389, 210, 343, 211, 217, 248, 191, 374,
        366, 376, 175, 379, 489, 352, 257, 247, 473, 464, 420, 347, 177, 454,
        423, 125, 259, 390,   4, 469,  31, 440, 261, 459, 219, 252, 432, 218,
        306, 138,  79, 224,  29, 498, 245,   2, 226, 303, 456, 109, 332,  41,
        168, 360, 122, 264, 188, 395, 148, 236, 410, 511, 453,  13,  64, 393,
        342, 169, 277, 495, 475, 369, 368, 397, 155, 129, 392,  49, 267, 181,
        288,  17, 111, 466, 107,  87, 114, 193, 465, 398, 452, 443, 380, 326,
        301, 135, 134, 208, 329, 490, 478, 502, 322, 240, 123, 439, 144, 357,
         54, 350, 242, 289, 371, 189, 331, 437, 182, 287, 137,  69,  88, 482,
        450, 400, 145, 106,  36, 174, 234, 223, 408, 262,  16, 330, 195,  19,
        231, 447,  22, 412, 445, 184, 405,   5, 216,  14,  42, 237, 147,  67,
         73, 403,  81, 100,  59, 238, 196, 485,  82, 318, 433, 418, 161, 198,
        192,  58,  95, 427, 363, 463, 436, 425, 142, 509, 377, 348, 349, 243,
        167, 131,  23, 506,  34, 101, 430, 503,  90, 263, 365, 146, 233, 488,
         77, 504,  15, 468, 312, 356,  99, 388, 212, 378,  75, 116, 251, 337,
        492,   3, 414, 108, 183,  89, 300,   6, 133,  66, 213, 449,  84, 340,
         72, 136, 458, 304,  25, 510,  44, 199, 266, 185, 387, 250,  78, 404,
        149,  26, 421, 299,  52, 474, 448,  85,  37,  21, 159,  61, 151, 128,
        290, 339, 344, 402,  94, 507, 166,  46, 293, 280, 113, 444, 406, 150,
        462, 345, 141, 115, 323, 241, 207,  62, 297, 254, 375, 384, 486,  76,
         11, 505, 298, 328, 286, 190,  40, 255, 370, 451, 394, 143, 484, 282,
        103, 171,  38, 313,  93, 416, 246, 315, 496, 152,   8, 401, 222,  98,
        477, 481, 229, 232, 110,  47, 346, 309, 163, 179, 446, 399, 391, 186,
         27, 431, 355, 127, 438, 235, 471,  60, 476, 284, 104, 362,  55, 278,
        172,  65, 271, 173, 180, 441, 202, 372, 162, 310, 386, 351, 422, 480,
        319,  10, 291, 497, 305, 429,  30, 121, 493, 426, 308, 194, 178, 274,
        157, 327, 112, 225, 455, 472, 296,  91, 275, 176,  24, 367, 461,  96,
        483, 239, 460, 164, 407,  45, 320, 228, 260, 381, 324, 361,  86, 117,
        491, 272, 415, 230,   0, 244, 197, 227,  43, 417, 354, 338, 411, 467,
        358, 124, 428, 139,  57,  20,  71,  83, 341,  68, 206, 200, 209, 501,
         51, 119, 276, 396,  28, 499, 321, 364,   7, 268, 249,  32, 158, 494,
        154, 201,  39,  48, 165, 302, 359, 409,   1, 314, 317, 214, 160, 307,
         70,  92, 424, 335, 102, 292,  18, 132, 270, 283, 253, 419, 316, 279,
        435, 105, 204, 470, 434,  97, 373, 215], device='cuda:0')
saving_filter_idices : tensor([333, 325, 156, 221, 500,   9, 442, 269, 334,  12, 385, 479,  74,  80,
        140, 220, 187, 170, 258, 120, 130, 382,  56, 203, 336, 265, 295, 285,
        413, 457, 118, 281,  63, 273, 353, 256, 126, 487, 205,  35,  33, 311,
        508,  53,  50, 383, 153, 294, 389, 210, 343, 211, 217, 248, 191, 374,
        366, 376, 175, 379, 489, 352, 257, 247, 473, 464, 420, 347, 177, 454,
        423, 125, 259, 390,   4, 469,  31, 440, 261, 459, 219, 252, 432, 218,
        306, 138,  79, 224,  29, 498, 245,   2, 226, 303, 456, 109, 332,  41,
        168, 360, 122, 264, 188, 395, 148, 236, 410, 511, 453,  13,  64, 393,
        342, 169, 277, 495, 475, 369, 368, 397, 155, 129, 392,  49, 267, 181,
        288,  17, 111, 466, 107,  87, 114, 193, 465, 398, 452, 443, 380, 326,
        301, 135, 134, 208, 329, 490, 478, 502, 322, 240, 123, 439, 144, 357,
         54, 350, 242, 289, 371, 189, 331, 437, 182, 287, 137,  69,  88, 482,
        450, 400, 145, 106,  36, 174, 234, 223, 408, 262,  16, 330, 195,  19,
        231, 447,  22, 412, 445, 184, 405,   5, 216,  14,  42, 237, 147,  67,
         73, 403,  81, 100,  59, 238, 196, 485,  82, 318, 433, 418, 161, 198,
        192,  58,  95, 427, 363, 463, 436, 425, 142, 509, 377, 348, 349, 243,
        167, 131,  23, 506,  34, 101, 430, 503,  90, 263, 365, 146, 233, 488,
         77, 504,  15, 468, 312, 356,  99, 388, 212, 378,  75, 116, 251, 337,
        492,   3, 414, 108], device='cuda:0')
pruned_weight.shape : torch.Size([256, 256, 3, 3])
pruned_bias.shape : torch.Size([256])
pruned_bn_gamma.shape : torch.Size([256])
pruned_bn_beta.shape : torch.Size([256])
pruned_bn_running_mean.shape : torch.Size([256])
pruned_bn_running_var.shape : torch.Size([256])
pruned_next_weight.shape : torch.Size([512, 256, 3, 3])
========================================  conv11  ========================================
pruned_rate : 50%
num_prune_channels : 256
weight.shape : torch.Size([512, 256, 3, 3])
bias.shape : torch.Size([512])
bn_gamma.shape : torch.Size([512])
bn_beta.shape : torch.Size([512])
bn_running_mean.shape : torch.Size([512])
bn_running_var.shape : torch.Size([512])
sorted_weight_indices : tensor([ 31, 487, 352, 341, 463, 219, 222, 349, 281, 333, 210,  91, 485, 457,
        180, 504, 488, 490, 304, 273, 125, 407, 310, 181, 115,  62,  35, 346,
        356,  58, 393, 255,  89, 230, 388, 315, 340, 371, 211, 144, 491, 173,
        338,  65, 259, 110, 473, 445, 505, 216, 309,  67, 114, 450,  45, 108,
        155, 102, 409, 111,  94, 193, 332, 119, 166, 479, 447,  12, 510, 454,
        401, 467, 227, 325, 337, 402,  72, 321, 250, 462, 152, 184, 376,  79,
         13, 223, 201, 433, 392,  42, 291, 233, 300,  32, 444, 334, 244, 411,
        252, 292,  33, 448, 501, 133,  57, 169,  18, 288,  61, 164, 353, 449,
        139,  86,  75, 317,  26,  92,  52, 422, 145,   2, 400,   3, 498, 270,
         21, 100, 484, 283, 205, 239, 280, 182, 241,  70, 418, 103,  69, 363,
        378, 295,  15,  28, 499, 303, 104, 129,  41, 446, 458,   5,  30,  80,
        368, 472, 394, 354,  59,  34, 386, 176, 195, 137, 150,  63, 260, 156,
        263, 269, 477, 414,   1,  19, 272, 500, 330, 360, 170, 361, 461, 397,
        496, 347, 157, 282, 459, 358, 415, 294,  90, 511, 440,  76, 236, 194,
        159, 326, 417, 151, 482,  78, 437, 168, 377, 271, 218, 208, 140,   0,
        486,  17,   8,  71, 234, 480, 105, 187,  40, 342,  87, 174, 217, 225,
        320, 245, 384, 165, 328, 302, 395, 147, 426, 162, 443, 365, 478, 307,
        372, 483, 257, 493, 203, 154, 183, 316, 423,  16, 258,   4, 364, 153,
        177, 318,  22, 235, 314, 262, 127, 167,  49, 408, 237,  83,  54, 460,
        293, 106, 442, 475, 146, 275, 214,  85, 428, 312, 507, 502,  48,   9,
        464, 141, 226, 112,  97,  66, 431, 336, 306, 385,  44, 253, 382, 186,
        120, 430, 284, 107, 506, 246, 416, 160, 436,   6, 279,  60,  99, 124,
         84, 434,  68, 381, 199, 276,  29, 481, 161, 468, 424, 215, 305,  47,
        374, 380, 366,  14, 240,  38, 375, 322, 403, 331,  53, 278, 251, 220,
        131, 242, 412, 313, 379,   7,  51, 495, 327,  50, 196, 117, 264, 206,
         73, 221, 116, 357, 249, 311, 452,  27,  10,  81, 113,  20,  96, 370,
        355, 238, 405, 298, 348, 497, 441, 130, 297,  82, 345, 190, 267, 265,
        391, 289, 425, 135,  64, 470, 136, 212, 274, 213, 344, 149, 204, 476,
        453, 247, 398,  77,  25, 142, 185, 231, 308, 399, 339, 143, 456, 158,
        121,  36, 243, 435, 508, 163, 224, 429, 324, 396, 323, 229,  43, 128,
        404, 172, 202,  95, 373, 350, 192, 268, 503, 256, 509, 383, 413, 335,
        471, 351, 489, 427, 138, 329, 465, 148, 248,  24, 126,  74, 207, 261,
         46, 188,  88, 175, 432, 296, 179, 134, 122, 439, 343, 286, 254, 132,
        362, 387, 451, 171, 319, 232, 494, 109, 123, 101, 389, 369, 301, 367,
        200, 266, 290, 438,  23, 469, 455,  56, 118, 197, 299, 474, 277, 492,
         39, 285,  55, 198, 420, 287, 421, 209, 359, 189,  11, 410,  37, 466,
        390,  93, 419, 178, 228, 191, 406,  98], device='cuda:0')
saving_filter_idices : tensor([ 31, 487, 352, 341, 463, 219, 222, 349, 281, 333, 210,  91, 485, 457,
        180, 504, 488, 490, 304, 273, 125, 407, 310, 181, 115,  62,  35, 346,
        356,  58, 393, 255,  89, 230, 388, 315, 340, 371, 211, 144, 491, 173,
        338,  65, 259, 110, 473, 445, 505, 216, 309,  67, 114, 450,  45, 108,
        155, 102, 409, 111,  94, 193, 332, 119, 166, 479, 447,  12, 510, 454,
        401, 467, 227, 325, 337, 402,  72, 321, 250, 462, 152, 184, 376,  79,
         13, 223, 201, 433, 392,  42, 291, 233, 300,  32, 444, 334, 244, 411,
        252, 292,  33, 448, 501, 133,  57, 169,  18, 288,  61, 164, 353, 449,
        139,  86,  75, 317,  26,  92,  52, 422, 145,   2, 400,   3, 498, 270,
         21, 100, 484, 283, 205, 239, 280, 182, 241,  70, 418, 103,  69, 363,
        378, 295,  15,  28, 499, 303, 104, 129,  41, 446, 458,   5,  30,  80,
        368, 472, 394, 354,  59,  34, 386, 176, 195, 137, 150,  63, 260, 156,
        263, 269, 477, 414,   1,  19, 272, 500, 330, 360, 170, 361, 461, 397,
        496, 347, 157, 282, 459, 358, 415, 294,  90, 511, 440,  76, 236, 194,
        159, 326, 417, 151, 482,  78, 437, 168, 377, 271, 218, 208, 140,   0,
        486,  17,   8,  71, 234, 480, 105, 187,  40, 342,  87, 174, 217, 225,
        320, 245, 384, 165, 328, 302, 395, 147, 426, 162, 443, 365, 478, 307,
        372, 483, 257, 493, 203, 154, 183, 316, 423,  16, 258,   4, 364, 153,
        177, 318,  22, 235], device='cuda:0')
pruned_weight.shape : torch.Size([256, 256, 3, 3])
pruned_bias.shape : torch.Size([256])
pruned_bn_gamma.shape : torch.Size([256])
pruned_bn_beta.shape : torch.Size([256])
pruned_bn_running_mean.shape : torch.Size([256])
pruned_bn_running_var.shape : torch.Size([256])
pruned_next_weight.shape : torch.Size([512, 256, 3, 3])
========================================  conv12  ========================================
pruned_rate : 50%
num_prune_channels : 256
weight.shape : torch.Size([512, 256, 3, 3])
bias.shape : torch.Size([512])
bn_gamma.shape : torch.Size([512])
bn_beta.shape : torch.Size([512])
bn_running_mean.shape : torch.Size([512])
bn_running_var.shape : torch.Size([512])
sorted_weight_indices : tensor([186, 212, 415, 127, 337, 216,  34, 204, 329, 124, 417,  18,  85, 301,
        486, 311, 140, 151, 430, 278,  21, 281, 422, 215, 257,  73,  11, 226,
         41, 390, 236, 392,   1, 451, 493,  99, 178, 462, 489, 461, 143, 120,
        361,  33, 313, 310, 262, 360, 162, 457, 166,  86, 189,  39,  32, 149,
        375, 250, 495, 378, 243, 290, 442, 110, 150, 188, 259, 466, 485, 347,
        240, 441, 279, 292, 320, 341, 148, 437, 405, 187,  71, 233, 427, 274,
        228, 295, 287, 272,  12,  88, 368, 482,  57, 414, 129, 454, 455, 404,
         97, 491,  23, 475, 334,  91, 179, 502, 465,   7, 460, 367, 235,  64,
        201, 339, 432, 471, 397, 356, 118, 115, 229,  50, 199, 431, 492,  13,
         16, 217, 401, 470, 231, 142, 138,  25, 197,  77, 219, 315, 255, 284,
        205, 407, 109, 155, 456, 254,  60, 453, 137, 506,   9, 141, 102,  45,
        171, 280, 445, 300, 319,  65, 220, 385, 261, 403,   3, 111,  67, 363,
        429, 207, 154,  62, 123,  66, 291, 338, 387, 308, 478,  58, 497, 185,
        101, 406, 440, 299, 359,  90,  31,  84,  10, 366, 181, 443,  68, 293,
        114, 246, 364, 132,  59, 324, 434, 439,  75, 416,  46, 241, 372, 484,
        224, 323, 294, 413, 373,  89, 222, 265, 159, 164, 419, 473, 161, 198,
         44, 175,  37, 157,  47, 176, 418, 230, 389, 336, 400, 245, 158, 275,
        452, 340, 238, 104,   8,  93, 370, 160, 139, 507, 322, 330, 208, 438,
        349, 184, 435, 283, 221, 380, 411, 247, 344, 249, 169, 119,  26,  98,
        487, 511, 227,  17, 136, 383, 307, 244,  69,   6, 193, 173,  61, 153,
        125, 355, 182, 266, 146, 191, 234, 145, 225, 357,  95, 377, 472, 386,
        256,  42,  72, 499,  83, 444, 270, 297, 206,  22, 211,  81, 333, 483,
        152, 252, 218, 258,   5, 458, 277, 488, 100, 303, 106, 242, 494, 112,
        223, 412, 463, 384, 180,  78,   4, 163, 381, 285, 331,  15,  96, 167,
        209,  43, 468, 467, 202, 328, 128, 421,  38, 122, 260,  76, 353, 479,
         19, 388, 190,  55,  49, 423,  24, 410, 203, 374, 424, 312, 309, 459,
         36, 251, 379, 409, 117, 144, 490, 196, 177, 126, 183,  82, 170, 505,
        504,  35, 469, 288, 343, 302, 113, 269, 498, 200,  54,  53, 448, 436,
        289,  48,  51,  14,  70, 351, 450, 425, 369, 116, 248,  40, 480, 232,
        335, 447, 477, 321, 348,  94, 428,  29, 396, 133, 213, 306, 394, 108,
        318,  63, 264,  74, 391, 253, 476,  28, 408, 474, 276,  20,  27, 210,
         92, 135, 134, 501, 345, 147, 395, 105, 481,  79, 286, 371, 107, 267,
        508, 263, 130, 342, 172, 305, 350, 352, 121, 194, 165, 317, 237, 382,
        316, 420, 156, 325, 103, 282, 398, 271,   2,   0,  87, 346,  56, 354,
        314,  80, 376, 362, 365, 168, 433, 332, 503, 239, 510, 174, 358, 509,
        393, 192,  52, 449, 327, 273, 131, 496, 195, 402, 326, 399, 464, 446,
        296, 500, 304, 268, 214, 426,  30, 298], device='cuda:0')
saving_filter_idices : tensor([186, 212, 415, 127, 337, 216,  34, 204, 329, 124, 417,  18,  85, 301,
        486, 311, 140, 151, 430, 278,  21, 281, 422, 215, 257,  73,  11, 226,
         41, 390, 236, 392,   1, 451, 493,  99, 178, 462, 489, 461, 143, 120,
        361,  33, 313, 310, 262, 360, 162, 457, 166,  86, 189,  39,  32, 149,
        375, 250, 495, 378, 243, 290, 442, 110, 150, 188, 259, 466, 485, 347,
        240, 441, 279, 292, 320, 341, 148, 437, 405, 187,  71, 233, 427, 274,
        228, 295, 287, 272,  12,  88, 368, 482,  57, 414, 129, 454, 455, 404,
         97, 491,  23, 475, 334,  91, 179, 502, 465,   7, 460, 367, 235,  64,
        201, 339, 432, 471, 397, 356, 118, 115, 229,  50, 199, 431, 492,  13,
         16, 217, 401, 470, 231, 142, 138,  25, 197,  77, 219, 315, 255, 284,
        205, 407, 109, 155, 456, 254,  60, 453, 137, 506,   9, 141, 102,  45,
        171, 280, 445, 300, 319,  65, 220, 385, 261, 403,   3, 111,  67, 363,
        429, 207, 154,  62, 123,  66, 291, 338, 387, 308, 478,  58, 497, 185,
        101, 406, 440, 299, 359,  90,  31,  84,  10, 366, 181, 443,  68, 293,
        114, 246, 364, 132,  59, 324, 434, 439,  75, 416,  46, 241, 372, 484,
        224, 323, 294, 413, 373,  89, 222, 265, 159, 164, 419, 473, 161, 198,
         44, 175,  37, 157,  47, 176, 418, 230, 389, 336, 400, 245, 158, 275,
        452, 340, 238, 104,   8,  93, 370, 160, 139, 507, 322, 330, 208, 438,
        349, 184, 435, 283], device='cuda:0')
pruned_weight.shape : torch.Size([256, 256, 3, 3])
pruned_bias.shape : torch.Size([256])
pruned_bn_gamma.shape : torch.Size([256])
pruned_bn_beta.shape : torch.Size([256])
pruned_bn_running_mean.shape : torch.Size([256])
pruned_bn_running_var.shape : torch.Size([256])
pruned_next_weight.shape : torch.Size([512, 256, 3, 3])
========================================  conv13  ========================================
pruned_rate : 50%
num_prune_channels : 256
weight.shape : torch.Size([512, 256, 3, 3])
bias.shape : torch.Size([512])
bn_gamma.shape : torch.Size([512])
bn_beta.shape : torch.Size([512])
bn_running_mean.shape : torch.Size([512])
bn_running_var.shape : torch.Size([512])
sorted_weight_indices : tensor([ 66, 487, 253, 474, 173, 459, 420, 316, 427, 122, 245, 501, 423, 396,
        287, 461, 284, 443, 215, 274,  57, 382, 105,  35, 213, 128, 323, 208,
        457, 220,  42, 417, 505, 307, 426, 492, 293,  95,  75,  12,   7, 268,
        269, 116, 418, 187, 171, 295, 350, 164, 134, 503, 178,  94,  61, 508,
        176, 175,   1, 490, 344, 211,  29, 504, 413, 237, 242, 446, 193, 467,
        231, 357, 159, 345, 225, 251, 331,   6, 202, 272, 191, 190, 469, 303,
          0, 374, 153, 373,   8, 341, 294, 440,  80, 172, 221, 433, 466,  46,
        397, 458, 169, 195, 486, 318, 224, 300, 361, 115,  32,  70, 267, 181,
        338,  77, 297, 174, 230, 136,  48, 445, 346, 188,  73, 488,  17, 358,
        305, 448, 147, 309, 271, 210, 451, 257, 157, 336, 118, 365, 114, 259,
        260, 110, 247, 298,  18, 258, 332, 416, 185, 104, 262, 143,  93, 108,
        509,  68, 380, 301, 206,  16,  20, 200, 184, 113, 449, 125, 186, 444,
        222, 312, 478,  82, 204, 310, 241, 236, 372, 348, 390, 250, 383, 453,
        438, 133, 235, 263, 377,  97, 325, 408, 150, 362,  69, 386, 388,  30,
        227,  63, 214, 144, 161,  98, 101,  96, 100,  22,  54, 349, 228, 411,
        140, 352, 146, 240, 470,   2, 319, 442, 351,  49, 479, 354, 112, 126,
        491, 137,  39, 340, 314, 264, 378, 290, 138, 244, 367, 454, 256, 320,
        477, 324,  38,  99,  21, 177,   3, 510, 103, 154, 189,  89, 401,   4,
        485, 387, 364, 385, 476, 207, 130,   5, 201, 450, 432,  43,  28, 480,
        111, 135, 302, 249,  25, 180, 498,  88,  44, 399,  41, 167, 455, 462,
        311, 166, 313, 391, 304, 109, 306, 238, 493, 484, 428, 506, 131,  79,
        406, 218, 276, 192, 410, 468,  65, 155, 205, 255, 179, 363, 429, 482,
         34, 286, 376, 229, 296, 124, 392, 369,  53, 212, 330, 152, 424, 254,
        347, 475, 473, 360, 464, 142,  58, 288,  40,  85,  91, 299,  60, 132,
        499, 434,  27, 123,  19, 343, 148, 430, 414, 270, 209, 170, 342, 106,
        217, 226,  24, 415, 317, 489, 203, 165, 246,  15, 327,  67,  59,  84,
         62, 239, 436, 266,  90, 291, 398, 405, 460, 280, 145,  50, 315, 162,
        234,  83, 281, 232, 400, 409, 356, 265,  78, 107, 275, 404, 261, 289,
        368,  92, 129, 273, 393, 447, 419,  86, 322, 496, 370, 472, 335, 102,
         51, 495, 497,  55, 197, 196, 326, 321, 507, 494, 375, 463, 483, 389,
        199,  74,  76,  45, 277, 119, 334, 127, 441,  31,  37,  13, 452, 425,
         81, 151,  47, 285, 158,  71, 366, 359,  56,  52, 219, 355,  26, 243,
        403, 333, 471, 248, 394, 395,  36, 337, 371, 465, 328, 198, 435,  72,
        223, 183, 279, 278, 233, 168, 384,  87, 379, 431, 422, 381, 439, 252,
        339, 481,   9,  10, 182, 194, 308, 402, 353, 292, 283, 156, 407, 282,
        139, 160,  14, 141, 502, 500, 329, 120,  33,  11,  64,  23, 412, 149,
        163, 511, 121, 216, 117, 421, 437, 456], device='cuda:0')
saving_filter_idices : tensor([ 66, 487, 253, 474, 173, 459, 420, 316, 427, 122, 245, 501, 423, 396,
        287, 461, 284, 443, 215, 274,  57, 382, 105,  35, 213, 128, 323, 208,
        457, 220,  42, 417, 505, 307, 426, 492, 293,  95,  75,  12,   7, 268,
        269, 116, 418, 187, 171, 295, 350, 164, 134, 503, 178,  94,  61, 508,
        176, 175,   1, 490, 344, 211,  29, 504, 413, 237, 242, 446, 193, 467,
        231, 357, 159, 345, 225, 251, 331,   6, 202, 272, 191, 190, 469, 303,
          0, 374, 153, 373,   8, 341, 294, 440,  80, 172, 221, 433, 466,  46,
        397, 458, 169, 195, 486, 318, 224, 300, 361, 115,  32,  70, 267, 181,
        338,  77, 297, 174, 230, 136,  48, 445, 346, 188,  73, 488,  17, 358,
        305, 448, 147, 309, 271, 210, 451, 257, 157, 336, 118, 365, 114, 259,
        260, 110, 247, 298,  18, 258, 332, 416, 185, 104, 262, 143,  93, 108,
        509,  68, 380, 301, 206,  16,  20, 200, 184, 113, 449, 125, 186, 444,
        222, 312, 478,  82, 204, 310, 241, 236, 372, 348, 390, 250, 383, 453,
        438, 133, 235, 263, 377,  97, 325, 408, 150, 362,  69, 386, 388,  30,
        227,  63, 214, 144, 161,  98, 101,  96, 100,  22,  54, 349, 228, 411,
        140, 352, 146, 240, 470,   2, 319, 442, 351,  49, 479, 354, 112, 126,
        491, 137,  39, 340, 314, 264, 378, 290, 138, 244, 367, 454, 256, 320,
        477, 324,  38,  99,  21, 177,   3, 510, 103, 154, 189,  89, 401,   4,
        485, 387, 364, 385], device='cuda:0')
pruned_weight.shape : torch.Size([256, 256, 3, 3])
pruned_bias.shape : torch.Size([256])
pruned_bn_gamma.shape : torch.Size([256])
pruned_bn_beta.shape : torch.Size([256])
pruned_bn_running_mean.shape : torch.Size([256])
pruned_bn_running_var.shape : torch.Size([256])
pruned_next_weight.shape : torch.Size([512, 256])
Files already downloaded and verified
# test datas : 10000
Files already downloaded and verified
# train datas : 50000
mini batch shape : torch.Size([128, 3, 32, 32])
Epoch : 001, Training loss : 0.00389
Epoch : 001, Top-1 accuracy : 90.92%, Top-5 accuracy : 99.11%
Epoch : 002, Training loss : 0.00252
Epoch : 002, Top-1 accuracy : 91.15%, Top-5 accuracy : 99.17%
Epoch : 003, Training loss : 0.00214
Epoch : 003, Top-1 accuracy : 91.27%, Top-5 accuracy : 99.26%
Epoch : 004, Training loss : 0.00204
Epoch : 004, Top-1 accuracy : 91.28%, Top-5 accuracy : 99.27%
Epoch : 005, Training loss : 0.00203
Epoch : 005, Top-1 accuracy : 91.28%, Top-5 accuracy : 99.26%
Epoch : 006, Training loss : 0.00195
Epoch : 006, Top-1 accuracy : 91.33%, Top-5 accuracy : 99.22%
Epoch : 007, Training loss : 0.00191
Epoch : 007, Top-1 accuracy : 91.21%, Top-5 accuracy : 99.24%
Epoch : 008, Training loss : 0.00193
Epoch : 008, Top-1 accuracy : 91.27%, Top-5 accuracy : 99.29%
Epoch : 009, Training loss : 0.00189
Epoch : 009, Top-1 accuracy : 91.29%, Top-5 accuracy : 99.27%
Epoch : 010, Training loss : 0.00191
Epoch : 010, Top-1 accuracy : 91.32%, Top-5 accuracy : 99.24%
Epoch : 011, Training loss : 0.00186
Epoch : 011, Top-1 accuracy : 91.34%, Top-5 accuracy : 99.27%
Epoch : 012, Training loss : 0.00187
Epoch : 012, Top-1 accuracy : 91.28%, Top-5 accuracy : 99.26%
Epoch : 013, Training loss : 0.00188
Epoch : 013, Top-1 accuracy : 91.19%, Top-5 accuracy : 99.31%
Epoch : 014, Training loss : 0.00184
Epoch : 014, Top-1 accuracy : 91.22%, Top-5 accuracy : 99.24%
Epoch : 015, Training loss : 0.00183
Epoch : 015, Top-1 accuracy : 91.30%, Top-5 accuracy : 99.29%
Epoch : 016, Training loss : 0.00181
Epoch : 016, Top-1 accuracy : 91.36%, Top-5 accuracy : 99.28%
Epoch : 017, Training loss : 0.00182
Epoch : 017, Top-1 accuracy : 91.33%, Top-5 accuracy : 99.24%
Epoch : 018, Training loss : 0.00181
Epoch : 018, Top-1 accuracy : 91.24%, Top-5 accuracy : 99.19%
Epoch : 019, Training loss : 0.00184
Epoch : 019, Top-1 accuracy : 91.29%, Top-5 accuracy : 99.24%
Epoch : 020, Training loss : 0.00181
Epoch : 020, Top-1 accuracy : 91.39%, Top-5 accuracy : 99.25%
Epoch : 021, Training loss : 0.00180
Epoch : 021, Top-1 accuracy : 91.38%, Top-5 accuracy : 99.32%
Epoch : 022, Training loss : 0.00180
Epoch : 022, Top-1 accuracy : 91.33%, Top-5 accuracy : 99.28%
Epoch : 023, Training loss : 0.00181
Epoch : 023, Top-1 accuracy : 91.35%, Top-5 accuracy : 99.28%
Epoch : 024, Training loss : 0.00180
Epoch : 024, Top-1 accuracy : 91.33%, Top-5 accuracy : 99.25%
Epoch : 025, Training loss : 0.00179
Epoch : 025, Top-1 accuracy : 91.41%, Top-5 accuracy : 99.26%
Epoch : 026, Training loss : 0.00178
Epoch : 026, Top-1 accuracy : 91.41%, Top-5 accuracy : 99.26%
Epoch : 027, Training loss : 0.00178
Epoch : 027, Top-1 accuracy : 91.41%, Top-5 accuracy : 99.21%
Epoch : 028, Training loss : 0.00181
Epoch : 028, Top-1 accuracy : 91.39%, Top-5 accuracy : 99.21%
Epoch : 029, Training loss : 0.00179
Epoch : 029, Top-1 accuracy : 91.42%, Top-5 accuracy : 99.27%
Epoch : 030, Training loss : 0.00179
Epoch : 030, Top-1 accuracy : 91.41%, Top-5 accuracy : 99.23%
Epoch : 031, Training loss : 0.00178
Epoch : 031, Top-1 accuracy : 91.45%, Top-5 accuracy : 99.22%
Epoch : 032, Training loss : 0.00175
Epoch : 032, Top-1 accuracy : 91.46%, Top-5 accuracy : 99.25%
Epoch : 033, Training loss : 0.00176
Epoch : 033, Top-1 accuracy : 91.45%, Top-5 accuracy : 99.22%
Epoch : 034, Training loss : 0.00173
Epoch : 034, Top-1 accuracy : 91.42%, Top-5 accuracy : 99.23%
Epoch : 035, Training loss : 0.00176
Epoch : 035, Top-1 accuracy : 91.44%, Top-5 accuracy : 99.29%
Epoch : 036, Training loss : 0.00177
Epoch : 036, Top-1 accuracy : 91.42%, Top-5 accuracy : 99.31%
Epoch : 037, Training loss : 0.00177
Epoch : 037, Top-1 accuracy : 91.53%, Top-5 accuracy : 99.27%
Epoch : 038, Training loss : 0.00176
Epoch : 038, Top-1 accuracy : 91.48%, Top-5 accuracy : 99.24%
Epoch : 039, Training loss : 0.00176
Epoch : 039, Top-1 accuracy : 91.40%, Top-5 accuracy : 99.27%
Epoch : 040, Training loss : 0.00176
Epoch : 040, Top-1 accuracy : 91.47%, Top-5 accuracy : 99.28%
Best Top-1 validation acc : 91.53%
